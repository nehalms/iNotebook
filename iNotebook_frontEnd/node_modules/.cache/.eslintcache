[{"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\index.js":"1","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\App.js":"2","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Home.js":"3","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Alert.js":"4","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Navbar.js":"5","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\About.js":"6","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Login.js":"7","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Forgot_.js":"8","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Signup.js":"9","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\context\\notes\\NoteState.js":"10","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Notes.js":"11","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Verification.js":"12","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\context\\notes\\noteContext.js":"13","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\NoteItem.js":"14","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Addnote.js":"15"},{"size":267,"mtime":1721980420000,"results":"16","hashOfConfig":"17"},{"size":1645,"mtime":1721980420000,"results":"18","hashOfConfig":"17"},{"size":201,"mtime":1721980420000,"results":"19","hashOfConfig":"17"},{"size":589,"mtime":1721980420000,"results":"20","hashOfConfig":"17"},{"size":3343,"mtime":1722059037910,"results":"21","hashOfConfig":"17"},{"size":193,"mtime":1721980420000,"results":"22","hashOfConfig":"17"},{"size":2345,"mtime":1722059037910,"results":"23","hashOfConfig":"17"},{"size":4916,"mtime":1722059037910,"results":"24","hashOfConfig":"17"},{"size":5562,"mtime":1722059037930,"results":"25","hashOfConfig":"17"},{"size":2857,"mtime":1721980420000,"results":"26","hashOfConfig":"17"},{"size":4369,"mtime":1721980420000,"results":"27","hashOfConfig":"17"},{"size":1055,"mtime":1721980420000,"results":"28","hashOfConfig":"17"},{"size":109,"mtime":1721980420000,"results":"29","hashOfConfig":"17"},{"size":1257,"mtime":1721980420000,"results":"30","hashOfConfig":"17"},{"size":2203,"mtime":1722059394094,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"tmayul",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\index.js",[],[],["83","84","85","86","87","88"],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\App.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Home.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Alert.js",["89","90"],[],"import { React, useEffect } from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=> {\r\n        if(word == 'danger'){\r\n            word = 'error';\r\n        }\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    <div style={{height: '50px'}}> \r\n      {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Navbar.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\About.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Login.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Forgot_.js",["91"],[],"import React, { useState, useRef } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Verification from './Verification';\r\nimport emailjs from '@emailjs/browser';\r\n\r\nconst Forgot_ = (props)=> {\r\n  let navigate = useNavigate();\r\n  const mail = useRef(null);\r\n  const pass = useRef(null);\r\n  const cpass = useRef(null);\r\n  const [show, setShow] = useState(false);\r\n  const [code_, setCode] = useState(0);\r\n  const[Verified, setVerified] = useState(false);\r\n  const[id, setid] = useState(\"\");\r\n  const[credentials, setCredentials] = useState({email: \"\", password: \"\", cpassword: \"\"});\r\n\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const response = await fetch(`${process.env.REACT_APP_BASE_URL}/auth/updatePassword`, {\r\n      method: \"POST\", \r\n      headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({id: id, email: credentials.email, password: credentials.password}), // body data type must match \"Content-Type\" header\r\n    });\r\n\r\n    const json = await response.json();\r\n    // console.log(json);\r\n    if(json.success){\r\n      props.showAlert(\"Password updated successfully\", 'success');\r\n    }\r\n    else{\r\n      props.showAlert(\"Something went wrong\", 'danger');\r\n    }\r\n    navigate('/login');\r\n  }\r\n\r\n  const onChange = async (e)=> {\r\n    setCredentials({...credentials, [e.target.name]: e.target.value}) //helps to keep data in note as same and append the new values being typed\r\n    if(Verified){\r\n      if(cpass.current.value === pass.current.value && credentials.cpassword !== \"\"){\r\n        cpass.current.style.border = \"2px solid green\";\r\n      }\r\n      else if(cpass.current.value !== \"\" && cpass.current.value !== pass.current.value){\r\n        cpass.current.style.border = \"2px solid red\";\r\n      }\r\n    }\r\n  }\r\n\r\n  const sendEmail = async (e) => {    \r\n    const response = await fetch(`${process.env.REACT_APP_BASE_URL}/auth/getPassword`, {\r\n        method: \"POST\", \r\n        headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({email: credentials.email}), // body data type must match \"Content-Type\" header\r\n    });\r\n\r\n    const json = await response.json();\r\n    // console.log(json);\r\n    if(credentials.email.toString().endsWith(\"gmail.com\") && json.found){\r\n      setid(json.user._id);\r\n      setVerified(false);\r\n      props.showAlert(\"Code send to your mail\", \"success\");\r\n      setShow(true);\r\n      e.preventDefault();\r\n      var val = Math.floor((Math.random()*1000000)+1);\r\n      setCode(val);\r\n      \r\n      emailjs.send('service_91ihvdw', 'template_uh8dkxp',{\r\n        to_name: credentials.name,\r\n        message: \"Verification code \",\r\n        code : val,\r\n        to_mail: credentials.email,\r\n      } , 'ytEYvYv1q0VNEV4EE', \r\n      )\r\n      .then((result) => {\r\n            console.log(result.text);\r\n        }, (error) => {\r\n            console.log(error.text);\r\n        });\r\n    }\r\n    else{\r\n      if(!credentials.email.toString().endsWith(\"@gmail.com\")){\r\n        props.showAlert(\"Enter valid email\", 'warning');\r\n        return\r\n      }\r\n      props.showAlert(\"Email not found\", 'danger');\r\n    }\r\n  };\r\n\r\n  const verify = (code)=> {\r\n    console.log(code + \" \" + code_);\r\n    if(code == code_){\r\n      setVerified(true);\r\n      setShow(false);\r\n      mail.current.style.border = '3px solid #63E6BE';\r\n      props.showAlert(\"Verified\", \"success\");\r\n    }\r\n    else {\r\n      props.showAlert(\"Invalid code\", \"danger\")\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container my-5'>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n          <input type=\"email\" ref={mail} className=\"form-control\" id=\"email\" name=\"email\" onChange={onChange} required/>\r\n          { !show && !Verified && <button type=\"button\" onClick={sendEmail} className=\"btn btn-warning mt-2\">Send code</button> }\r\n        </div>\r\n        { Verified  && <><i className=\"mx-2 fa-solid fa-check\" style={{color: \"#63E6BE\"}}></i><h6 style={{display : \"inline\"}}>Verified</h6></>}\r\n        { show && <Verification verify={verify} sendEmail={sendEmail}/>}\r\n        { Verified && <div className=\"mb-3 my-3\">\r\n          <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n          <input type=\"password\" ref={pass} className=\"form-control\" id=\"password\" name=\"password\" onChange={onChange} minLength={6} required/>\r\n        </div>}\r\n        { Verified && <div className=\"mb-3\">\r\n          <label htmlFor=\"cpassword\" className=\"form-label\">Confirm Password</label>\r\n          <input type=\"password\" ref={cpass} className=\"form-control\" id=\"cpassword\" name=\"cpassword\" onChange={onChange} minLength={6} required/>\r\n        </div>}\r\n        { Verified && <button type=\"submit\" className=\"btn btn-primary\">Update</button>}\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Forgot_\r\n","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Signup.js",["92"],[],"import React, { useState, useRef } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport emailjs from '@emailjs/browser';\r\nimport Verification from './Verification';\r\n\r\nconst Signup = (props) => {\r\n    const mail = useRef(null);\r\n    const pass = useRef(null);\r\n    const cpass = useRef(null);\r\n    let navigate = useNavigate();\r\n    const[credentials, setCredentials] = useState({name:\"\", email: \"\", password: \"\", cpassword: \"\"});\r\n    const[code_, setCode] = useState(0);\r\n    const[show, setShow] = useState(false);\r\n    const[Verified, setVerified] = useState(false);\r\n\r\n    const handleSubmit = async (e)=> {\r\n        if(credentials.password !== credentials.cpassword) {\r\n          props.showAlert(\"Password didn't match\",'warning');\r\n          e.preventDefault();\r\n          return;\r\n        }\r\n        console.log(Verified);\r\n        if(!Verified) {\r\n          props.showAlert(\"Email not verified\", 'danger');\r\n          mail.current.style.border = '2px solid red';  \r\n          e.preventDefault();\r\n          return;\r\n        }\r\n        e.preventDefault();\r\n        const response = await fetch(`${process.env.REACT_APP_BASE_URL}/auth/createuser`, {\r\n            method: \"POST\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({name: credentials.name, email: credentials.email, password: credentials.password}), // body data type must match \"Content-Type\" header\r\n        });\r\n        const json = await response.json();\r\n        console.log(json); \r\n        if(json.success){\r\n          localStorage.setItem('token', json.authToken);\r\n          navigate(\"/login\"); // to redirect the page to home page\r\n          props.showAlert(\"Sign in successfull\", \"success\");\r\n        }\r\n        else {\r\n            props.showAlert(json.error, \"danger\");\r\n        }\r\n    }\r\n\r\n    const onChange = async (e)=> {\r\n        console.log(localStorage.getItem('token'));\r\n        setCredentials({...credentials, [e.target.name]: e.target.value}) //helps to keep data in note as same and append the new values being typed\r\n        // console.log(pass.current.value + \" = \" + cpass.current.value + \" => \" + (pass.current.value == cpass.current.value));\r\n        if(cpass.current.value === pass.current.value && credentials.cpassword !== \"\"){\r\n          cpass.current.style.border = \"2px solid green\";\r\n        }\r\n        else if(cpass.current.value !== \"\" && cpass.current.value !== pass.current.value){\r\n          cpass.current.style.border = \"2px solid red\";\r\n        }\r\n    }\r\n\r\n    const sendEmail = (e) => {\r\n      \r\n      if(credentials.email.toString().endsWith(\".com\")){\r\n        setVerified(false);\r\n        props.showAlert(\"Code send to your mail\", \"success\");\r\n        setShow(true);\r\n        e.preventDefault();\r\n        var val = Math.floor((Math.random()*1000000)+1);\r\n        setCode(val);\r\n        \r\n        emailjs.send('service_91ihvdw', 'template_uh8dkxp',{\r\n          to_name: credentials.name,\r\n          message: \"Verification code \",\r\n          code : val,\r\n          to_mail: credentials.email,\r\n        } , 'ytEYvYv1q0VNEV4EE', \r\n        )\r\n        .then((result) => {\r\n              console.log(result.text);\r\n          }, (error) => {\r\n              console.log(error.text);\r\n          });\r\n      }\r\n      else{\r\n        props.showAlert(\"Email cannot be empty\", 'danger');\r\n      }\r\n    };\r\n\r\n    const verify = (code)=> {\r\n      console.log(code + \" \" + code_);\r\n      if(code == code_){\r\n        setVerified(true);\r\n        setShow(false);\r\n        mail.current.style.border = '3px solid #63E6BE';\r\n        props.showAlert(\"Verified\", \"success\");\r\n      }\r\n      else {\r\n        props.showAlert(\"Invalid code\", \"danger\")\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className='container my-5'>\r\n          <form onSubmit={handleSubmit}>\r\n            <h2 className='my-3'>Create an account to use iNotebook</h2>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"name\" className=\"form-label\">Name</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" onChange={onChange} aria-describedby=\"emailHelp\" minLength={5} required/>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n              <input type=\"email\" ref={mail} className=\"form-control\" id=\"email\" name=\"email\" onChange={onChange} required/>\r\n              { !show && !Verified && <button type=\"button\" onClick={sendEmail} className=\"btn btn-warning mt-2\">Send code</button> }\r\n            </div>\r\n            { Verified && <><i class=\"mx-2 fa-solid fa-cVerified heck\" style={{color: \"#63E6BE\"}}></i><h6 style={{display : \"inline\"}}>Verified</h6></>}\r\n            {show && <Verification verify={verify} sendEmail={sendEmail}/>}\r\n            <div className=\"mb-3 my-3\">\r\n              <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n              <input type=\"password\" ref={pass} className=\"form-control\" id=\"password\" name=\"password\" onChange={onChange} minLength={6} required/>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"cpassword\" className=\"form-label\">Confirm Password</label>\r\n              <input type=\"password\" ref={cpass} className=\"form-control\" id=\"cpassword\" name=\"cpassword\" onChange={onChange} minLength={6} required/>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\context\\notes\\NoteState.js",["93"],[],"import React, { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props)=> {\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitital = []\r\n    const [notes, setNotes] = useState(notesInitital)\r\n\r\n\r\n    //get all notes\r\n    const fetchNotes = async ()=> {\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: \"GET\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            }\r\n        });\r\n        const json = await response.json();\r\n        console.log(json);\r\n        setNotes(json);\r\n    }\r\n\r\n\r\n    //Add a note\r\n    const addNote = async (title, description, tag)=> {\r\n\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: \"POST\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title, description, tag}), // body data type must match \"Content-Type\" header\r\n        });\r\n        \r\n        const json = response.json();\r\n        console.log(json);\r\n        fetchNotes();\r\n\r\n        // const note = {\r\n        //     \"_id\": \"655dc7c322037a12484024ef\",\r\n        //     \"user\": \"655c7e526b2e8dfff2fedd52\",\r\n        //     \"title\": title,\r\n        //     \"description\": description,\r\n        //     \"tag\": tag,\r\n        //     \"date\": \"2023-11-22T09:20:03.092Z\",\r\n        //     \"__v\": 0\r\n        // }\r\n        // setNotes(notes.concat(note))\r\n    }\r\n\r\n\r\n    //Delete a note\r\n    const deleteNote = async (id)=> {\r\n\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: \"PUT\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            },\r\n        });\r\n        console.log(response.json());\r\n        fetchNotes();\r\n        // const newNotes = notes.filter((note) => {return note._id !== id});\r\n        // setNotes(newNotes);\r\n    }\r\n\r\n\r\n    //Edit a note\r\n    const updateNote = async (id, title, description, tag)=> {\r\n        console.log(\"Got a request\")\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: \"PUT\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title, description, tag}), // body data type must match \"Content-Type\" header\r\n        });\r\n        fetchNotes();\r\n    }\r\n\r\n\r\n    return (\r\n        <NoteContext.Provider value={{notes, fetchNotes, addNote, deleteNote, updateNote}}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Notes.js",["94"],[],"import React,{ useContext, useEffect, useRef, useState } from 'react'\r\nimport noteContext from '../context/notes/noteContext';\r\nimport NoteItem from './NoteItem';\r\nimport Addnote from './Addnote';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Notes = (props) => {\r\n    let navigate = useNavigate();\r\n    const context = useContext(noteContext);\r\n    const {notes, fetchNotes, updateNote} = context;\r\n    const [note, setNote] = useState({id:\"\", etitle: \"\", edescription: \"\", etag: \"\"})\r\n\r\n    useEffect(() => {\r\n        if(localStorage.getItem('token')){\r\n            fetchNotes();\r\n        }\r\n        else {\r\n            navigate(\"/login\");\r\n        }\r\n    }, [])\r\n\r\n    const editNote = (currentNote)=>{\r\n        ref.current.click();\r\n        setNote({id:currentNote._id, etitle: currentNote.title, edescription: currentNote.description, etag: currentNote.tag});\r\n    }\r\n    const ref = useRef(null);\r\n    const refClose = useRef(null);\r\n\r\n    const handleClick = (e)=> {\r\n        e.preventDefault();\r\n        updateNote(note.id, note.etitle, note.edescription, note.etag);\r\n        props.showAlert(\"Notes updated successfully\", \"success\");\r\n        refClose.current.click();\r\n    }\r\n\r\n    const onChange = (e)=> {\r\n        setNote({...note, [e.target.name]: e.target.value}) //helps to keep data in note as same and append the new values being typed\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Addnote showAlert={props.showAlert}/>  \r\n            <button type=\"button\" className=\"btn btn-primary\" ref={ref} hidden=\"true\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n            Launch demo modal</button>\r\n\r\n            <div className=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title fs-5\" id=\"exampleModalLabel\">Edit Note</h1>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <form>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"title\" className=\"form-label\">Title</label>\r\n                                    <input type=\"text\"  value={note.etitle} className=\"form-control\" id=\"etitle\" name=\"etitle\" onChange={onChange} />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"description\" className=\"form-label\">Description</label>\r\n                                    <input type=\"text\" value={note.edescription} className=\"form-control\" id=\"edescription\" name=\"edescription\" onChange={onChange}/>\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"tag\" className=\"form-label\">Tag</label>\r\n                                    <input type=\"text\" value={note.etag} className=\"form-control\" id=\"etag\" name=\"etag\" onChange={onChange}/>\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-secondary\" ref = {refClose} data-bs-dismiss=\"modal\">Close</button>\r\n                                    <button type=\"submit\" disabled={note.etitle.length < 5 || note.edescription.length < 5} onClick={handleClick} className=\"btn btn-primary\">Update Note</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-5\">\r\n                <h2>Your Notes</h2> \r\n                <div className='container mx-2'>\r\n                {notes.length === 0 && \"No Notes to display\"}\r\n                </div>\r\n                {notes.map((note)=> {\r\n                    return <NoteItem showAlert={props.showAlert} key={note.id} editNote={editNote} note={note}/>\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n","C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Verification.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\context\\notes\\noteContext.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\NoteItem.js",[],[],"C:\\Users\\USER\\Documents\\VS code\\React\\iNotebook\\iNotebook_frontEnd\\src\\components\\Addnote.js",[],[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":6,"column":17,"nodeType":"113","messageId":"114","endLine":6,"endColumn":19},{"ruleId":"111","severity":1,"message":"112","line":95,"column":13,"nodeType":"113","messageId":"114","endLine":95,"endColumn":15},{"ruleId":"111","severity":1,"message":"112","line":91,"column":15,"nodeType":"113","messageId":"114","endLine":91,"endColumn":17},{"ruleId":"107","severity":1,"message":"115","line":74,"column":15,"nodeType":"109","messageId":"110","endLine":74,"endColumn":23},{"ruleId":"116","severity":1,"message":"117","line":21,"column":8,"nodeType":"118","endLine":21,"endColumn":10,"suggestions":"119"},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["120"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchNotes' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["121"],"no-object-constructor",{"desc":"122","fix":"123"},"Update the dependencies array to be: [fetchNotes, navigate]",{"range":"124","text":"125"},[675,677],"[fetchNotes, navigate]"]