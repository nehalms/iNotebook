{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\VS code\\\\React\\\\iNotebook\\\\iNotebook_frontEnd\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitital = [];\n  const [notes, setNotes] = useState(notesInitital);\n\n  //get all notes\n  const fetchNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  //Add a note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = response.json();\n    console.log(json);\n    fetchNotes();\n\n    // const note = {\n    //     \"_id\": \"655dc7c322037a12484024ef\",\n    //     \"user\": \"655c7e526b2e8dfff2fedd52\",\n    //     \"title\": title,\n    //     \"description\": description,\n    //     \"tag\": tag,\n    //     \"date\": \"2023-11-22T09:20:03.092Z\",\n    //     \"__v\": 0\n    // }\n    // setNotes(notes.concat(note))\n  };\n\n  //Delete a note\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    console.log(response.json());\n    fetchNotes();\n    // const newNotes = notes.filter((note) => {return note._id !== id});\n    // setNotes(newNotes);\n  };\n\n  //Edit a note\n  const updateNote = async (id, title, description, tag) => {\n    console.log(\"Got a request\");\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    fetchNotes();\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      fetchNotes,\n      addNote,\n      deleteNote,\n      updateNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"13KWBidYPEr1fHo3Ctkm47xdCDY=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitital","notes","setNotes","fetchNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","deleteNote","id","updateNote","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/VS code/React/iNotebook/iNotebook_frontEnd/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props)=> {\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitital = []\r\n    const [notes, setNotes] = useState(notesInitital)\r\n\r\n\r\n    //get all notes\r\n    const fetchNotes = async ()=> {\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: \"GET\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            }\r\n        });\r\n        const json = await response.json();\r\n        console.log(json);\r\n        setNotes(json);\r\n    }\r\n\r\n\r\n    //Add a note\r\n    const addNote = async (title, description, tag)=> {\r\n\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: \"POST\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title, description, tag}), // body data type must match \"Content-Type\" header\r\n        });\r\n        \r\n        const json = response.json();\r\n        console.log(json);\r\n        fetchNotes();\r\n\r\n        // const note = {\r\n        //     \"_id\": \"655dc7c322037a12484024ef\",\r\n        //     \"user\": \"655c7e526b2e8dfff2fedd52\",\r\n        //     \"title\": title,\r\n        //     \"description\": description,\r\n        //     \"tag\": tag,\r\n        //     \"date\": \"2023-11-22T09:20:03.092Z\",\r\n        //     \"__v\": 0\r\n        // }\r\n        // setNotes(notes.concat(note))\r\n    }\r\n\r\n\r\n    //Delete a note\r\n    const deleteNote = async (id)=> {\r\n\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: \"PUT\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            },\r\n        });\r\n        console.log(response.json());\r\n        fetchNotes();\r\n        // const newNotes = notes.filter((note) => {return note._id !== id});\r\n        // setNotes(newNotes);\r\n    }\r\n\r\n\r\n    //Edit a note\r\n    const updateNote = async (id, title, description, tag)=> {\r\n        console.log(\"Got a request\")\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: \"PUT\", \r\n            headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title, description, tag}), // body data type must match \"Content-Type\" header\r\n        });\r\n        fetchNotes();\r\n    }\r\n\r\n\r\n    return (\r\n        <NoteContext.Provider value={{notes, fetchNotes, addNote, deleteNote, updateNote}}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}